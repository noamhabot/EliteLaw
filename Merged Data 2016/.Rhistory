}
plot(x=log(lambda), y=inner)
library(e1071)
library(glmnet)
set.seed(1200)
rm(list=ls())
n <- 100
x1 <- runif(n)
class1 <- data.frame(x1 = x1, x2 = 6 + x1*3 + runif(n), y = rep(0, n))
x1 <- runif(n)
class2 <- data.frame(x1 = x1, x2 = x1*3 + runif(n), y = rep(1, n))
df <- rbind(class1, class2)
plot(df$x1, df$x2, col=df$y)
colnames(df) <- c("X", "Y", "k")
plot(df$X,df$Y)
svm_model <- svm(k ~ ., data=df, cost=100, kernel="linear")
beta_svm <- as.numeric(t(svm_model$coefs) %*% svm_model$SV)
# normalize the beta_svm
beta_svm <- beta_svm/norm(beta_svm, type="2")
lambda <- exp(seq(-10,5,0.1))
mod <- glmnet(x=as.matrix(df[1:(2*n),1:2]), y=as.matrix(df[1:(2*n),3]),
alpha=0, standardize=FALSE, family="binomial", lambda=lambda)
modBetas <- as.data.frame(t(as.matrix(mod$beta)))
inner <- rep(0, nrow(modBetas))
#theta <- data.frame(1:length(lambda),2)
for (i in 1:dim(modBetas)[1]) {
modBetas[i,] <- modBetas[i,]/norm(as.vector(modBetas[i,]), type="2")
inner[i] <- as.numeric(modBetas[i,]) %*% beta_svm
}
plot(x=log(lambda), y=inner)
library(e1071)
library(glmnet)
set.seed(1200)
rm(list=ls())
n <- 100
x1 <- runif(n)
class1 <- data.frame(x1 = x1, x2 = 4 + x1*3 + runif(n), y = rep(0, n))
x1 <- runif(n)
class2 <- data.frame(x1 = x1, x2 = x1*3 + runif(n), y = rep(1, n))
df <- rbind(class1, class2)
plot(df$x1, df$x2, col=df$y)
colnames(df) <- c("X", "Y", "k")
plot(df$X,df$Y)
svm_model <- svm(k ~ ., data=df, cost=100, kernel="linear")
beta_svm <- as.numeric(t(svm_model$coefs) %*% svm_model$SV)
# normalize the beta_svm
beta_svm <- beta_svm/norm(beta_svm, type="2")
lambda <- exp(seq(-10,5,0.1))
mod <- glmnet(x=as.matrix(df[1:(2*n),1:2]), y=as.matrix(df[1:(2*n),3]),
alpha=0, standardize=FALSE, family="binomial", lambda=lambda)
modBetas <- as.data.frame(t(as.matrix(mod$beta)))
inner <- rep(0, nrow(modBetas))
#theta <- data.frame(1:length(lambda),2)
for (i in 1:dim(modBetas)[1]) {
modBetas[i,] <- modBetas[i,]/norm(as.vector(modBetas[i,]), type="2")
inner[i] <- as.numeric(modBetas[i,]) %*% beta_svm
}
plot(x=log(lambda), y=inner)
library(e1071)
library(glmnet)
set.seed(34)
rm(list=ls())
n <- 100
x1 <- runif(n)
class1 <- data.frame(x1 = x1, x2 = 4 + x1*3 + runif(n), y = rep(0, n))
x1 <- runif(n)
class2 <- data.frame(x1 = x1, x2 = x1*3 + runif(n), y = rep(1, n))
df <- rbind(class1, class2)
plot(df$x1, df$x2, col=df$y)
colnames(df) <- c("X", "Y", "k")
plot(df$X,df$Y)
svm_model <- svm(k ~ ., data=df, cost=100, kernel="linear")
beta_svm <- as.numeric(t(svm_model$coefs) %*% svm_model$SV)
# normalize the beta_svm
beta_svm <- beta_svm/norm(beta_svm, type="2")
lambda <- exp(seq(-10,5,0.1))
mod <- glmnet(x=as.matrix(df[1:(2*n),1:2]), y=as.matrix(df[1:(2*n),3]),
alpha=0, standardize=FALSE, family="binomial", lambda=lambda)
modBetas <- as.data.frame(t(as.matrix(mod$beta)))
inner <- rep(0, nrow(modBetas))
#theta <- data.frame(1:length(lambda),2)
for (i in 1:dim(modBetas)[1]) {
modBetas[i,] <- modBetas[i,]/norm(as.vector(modBetas[i,]), type="2")
inner[i] <- as.numeric(modBetas[i,]) %*% beta_svm
}
plot(x=log(lambda), y=inner)
library(e1071)
library(glmnet)
set.seed(78)
rm(list=ls())
n <- 100
x1 <- runif(n)
class1 <- data.frame(x1 = x1, x2 = 4 + x1*3 + runif(n), y = rep(0, n))
x1 <- runif(n)
class2 <- data.frame(x1 = x1, x2 = x1*3 + runif(n), y = rep(1, n))
df <- rbind(class1, class2)
plot(df$x1, df$x2, col=df$y)
colnames(df) <- c("X", "Y", "k")
plot(df$X,df$Y)
svm_model <- svm(k ~ ., data=df, cost=100, kernel="linear")
beta_svm <- as.numeric(t(svm_model$coefs) %*% svm_model$SV)
# normalize the beta_svm
beta_svm <- beta_svm/norm(beta_svm, type="2")
lambda <- exp(seq(-10,5,0.1))
mod <- glmnet(x=as.matrix(df[1:(2*n),1:2]), y=as.matrix(df[1:(2*n),3]),
alpha=0, standardize=FALSE, family="binomial", lambda=lambda)
modBetas <- as.data.frame(t(as.matrix(mod$beta)))
inner <- rep(0, nrow(modBetas))
#theta <- data.frame(1:length(lambda),2)
for (i in 1:dim(modBetas)[1]) {
modBetas[i,] <- modBetas[i,]/norm(as.vector(modBetas[i,]), type="2")
inner[i] <- as.numeric(modBetas[i,]) %*% beta_svm
}
plot(x=log(lambda), y=inner)
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
library(glmnet)
set.seed(78)
rm(list=ls())
n <- 100
x1 <- runif(n)
class1 <- data.frame(x1 = x1, x2 = 3 + x1*3 + runif(n), y = rep(0, n))
x1 <- runif(n)
class2 <- data.frame(x1 = x1, x2 = x1*3 + runif(n), y = rep(1, n))
df <- rbind(class1, class2)
plot(df$x1, df$x2, col=df$y)
colnames(df) <- c("X", "Y", "k")
plot(df$X,df$Y)
svm_model <- svm(k ~ ., data=df, cost=100, kernel="linear")
beta_svm <- as.numeric(t(svm_model$coefs) %*% svm_model$SV)
# normalize the beta_svm
beta_svm <- beta_svm/norm(beta_svm, type="2")
lambda <- exp(seq(-10,5,0.1))
mod <- glmnet(x=as.matrix(df[1:(2*n),1:2]), y=as.matrix(df[1:(2*n),3]),
alpha=0, standardize=FALSE, family="binomial", lambda=lambda)
modBetas <- as.data.frame(t(as.matrix(mod$beta)))
inner <- rep(0, nrow(modBetas))
#theta <- data.frame(1:length(lambda),2)
for (i in 1:dim(modBetas)[1]) {
modBetas[i,] <- modBetas[i,]/norm(as.vector(modBetas[i,]), type="2")
inner[i] <- as.numeric(modBetas[i,]) %*% beta_svm
}
plot(x=log(lambda), y=inner)
trigamma(1.773887)
n <- 1e6
v <- numeric(n)
for (i in 1:n) {
p <- rnorm(1, mean = pmean, sd = psd)
e1 <- rnorm(1, mean = 0, sd = sqrt(2))
e2 <- rnorm(1, mean = 0, sd = sqrt(2))
e3 <- rnorm(1, mean = 0, sd = sqrt(2))
X23 <- 13.49*p^3 + 3*p^2 + 3*p + 3 + p^2*e1 + p*e2 + e3
if (X23 > 2) {
v[i] <- 1
}
}
# probability:
mean(v)
p3 <- c(15.64, 16.16, 16.89, 16.16, 16.06, 15.08, 12.11, 13.66, 13.69, 13.59,
15.84, 14.92, 15.51, 13.87, 14.21, 15.67, 13, 12.37, 12.2, 13.49)
psd <- 1/(1+0.5*sum((p3[1:19])^2))
s <- 0
for (i in 2:20) {
s <- s + p3[i]*p3[(i-1)] - 3*p3[(i-1)]
}
pmean <- psd*(0.7 + 0.5 * (s) )
n <- 1e6
v <- numeric(n)
for (i in 1:n) {
p <- rnorm(1, mean = pmean, sd = psd)
e1 <- rnorm(1, mean = 0, sd = sqrt(2))
e2 <- rnorm(1, mean = 0, sd = sqrt(2))
e3 <- rnorm(1, mean = 0, sd = sqrt(2))
X23 <- 13.49*p^3 + 3*p^2 + 3*p + 3 + p^2*e1 + p*e2 + e3
if (X23 > 2) {
v[i] <- 1
}
}
# probability:
mean(v)
n <- 1e8
v <- numeric(n)
for (i in 1:n) {
p <- rnorm(1, mean = pmean, sd = psd)
e1 <- rnorm(1, mean = 0, sd = sqrt(2))
e2 <- rnorm(1, mean = 0, sd = sqrt(2))
e3 <- rnorm(1, mean = 0, sd = sqrt(2))
X23 <- 13.49*p^3 + 3*p^2 + 3*p + 3 + p^2*e1 + p*e2 + e3
if (X23 > 2) {
v[i] <- 1
}
}
# probability:
mean(v)
p3 <- c(15.64, 16.16, 16.89, 16.16, 16.06, 15.08, 12.11, 13.66, 13.69, 13.59,
15.84, 14.92, 15.51, 13.87, 14.21, 15.67, 13, 12.37, 12.2, 13.49)
pvar <- 1/(1+0.5*sum((p3[1:19])^2))
s <- 0
for (i in 2:20) {
s <- s + p3[i]*p3[(i-1)] - 3*p3[(i-1)]
}
pmean <- psd*(0.7 + 0.5 * (s) )
p3 <- c(15.64, 16.16, 16.89, 16.16, 16.06, 15.08, 12.11, 13.66, 13.69, 13.59,
15.84, 14.92, 15.51, 13.87, 14.21, 15.67, 13, 12.37, 12.2, 13.49)
pvar <- 1/(1+0.5*sum((p3[1:19])^2))
s <- 0
for (i in 2:20) {
s <- s + p3[i]*p3[(i-1)] - 3*p3[(i-1)]
}
pmean <- pvar*(0.7 + 0.5 * (s) )
n <- 1e6
v <- numeric(n)
for (i in 1:n) {
p <- rnorm(1, mean = pmean, sd = sqrt(pvar))
e1 <- rnorm(1, mean = 0, sd = sqrt(2))
e2 <- rnorm(1, mean = 0, sd = sqrt(2))
e3 <- rnorm(1, mean = 0, sd = sqrt(2))
X23 <- 13.49*p^3 + 3*p^2 + 3*p + 3 + p^2*e1 + p*e2 + e3
if (X23 > 2) {
v[i] <- 1
}
}
# probability:
mean(v)
Q = t(matrix(c(0, 1/3, 0, 1/3, 1/2, 0, 0, 0, 0, 0, 0, 1/2, 1/2, 0, 1/2, 0), nrow=4))
solve(diag(4)-Q)
solve(diag(4)-Q) %*% matrix(c(1, 1, 1, 1), nrow=4)
obs = c(0.57, 1.02, .87, 0.61, -.16)
first = matrix(c(exp(-0.5), exp(-0.5), exp(-0.5), exp(-1), exp(-1)), nrow=5)
first = t(first)
s = sum((obs-mean(obs))^2)/(length(obs)-1)
e = exp(-0.5)
last = matrix(obs-rep(0.05, 5))
m = matrix(c(s, 0, 0, e, e, 0, s, 0, e, e, 0, 0, s, e, e, e, e, e, s, 0, e, e, e, 0, s), nrow=5)
m = m+diag(5)
solve(m)
0.05 + first %*% solve(m) %*% last
# part (C)
1.2066 - first %*% solve(m) %*% t(first)
#Clear environment-------------------------------------------------------------------------
rm(list = ls())
#Load libraries----------------------------------------------------------------------------
library("openxlsx")
library(dplyr)
# Set working directory
setwd("~/Google Drive/Stanford Law Project/")
#==========================================================================================
#====================================== GET DATA ==========================================
#==========================================================================================
#Load the raw data-------------------------------------------------------------------------
final_ipo_equity_data = read.xlsx("Data/final_ipo_equity_data.xlsx", 1)
final_ma_data = read.xlsx("Data/final_ma_data.xlsx", 1)
ma_data_newdef = read.xlsx("Data/MA_data_NEWDEF.xlsx", 1)
mainData = read.xlsx("Data/database_2016.xlsx", 1)
#Drop wrong column with same name
mainData = mainData[, -7]
#Fix wrong firm names
mainData[2520, "Firm.Name"] = "Wilmer Cutler Pickering"
mainData[2666, "Firm.Name"] = "Piper Rudnick"
mainData[3228, "Firm.Name"] = "Kirkpatrick & Lockhart"
mainData[3320, "Firm.Name"] = "Wilmer Cutler Pickering Hale and Dorr"
mainData[3347, "Firm.Name"] = "Bradley Arant Boult Cummings"
mainData[3721, "Firm.Name"] = "Wilmer Cutler Pickering Hale and Dorr"
mainData[4640, "Firm.Name"] = "Locke Lord"
final_ipo_equity_data[2520, "FirmName"] = "Wilmer Cutler Pickering"
final_ipo_equity_data[2666, "FirmName"] = "Piper Rudnick"
final_ipo_equity_data[3228, "FirmName"] = "Kirkpatrick & Lockhart"
final_ipo_equity_data[3320, "FirmName"] = "Wilmer Cutler Pickering Hale and Dorr"
final_ipo_equity_data[3347, "FirmName"] = "Bradley Arant Boult Cummings"
final_ipo_equity_data[3721, "FirmName"] = "Wilmer Cutler Pickering Hale and Dorr"
final_ipo_equity_data[4640, "FirmName"] = "Locke Lord"
final_ipo_equity_data[which(final_ipo_equity_data$FirmName=="Venable" & final_ipo_equity_data$year==2010), "equity_proceeds"] = 20686.8
ma_data_newdef[2520, "Firm.Name"] = "Wilmer Cutler Pickering"
ma_data_newdef[3320, "Firm.Name"] = "Wilmer Cutler Pickering Hale and Dorr"
ma_data_newdef[3721, "Firm.Name"] = "Wilmer Cutler Pickering Hale and Dorr"
ma_data_newdef[4640, "Firm.Name"] = "Locke Lord"
#==========================================================================================
#======================================= ETL ==============================================
#==========================================================================================
#Firm-specific data------------------------------------------------------------------------
#Updating date (since publication is one year ld, we need to make it 1 year ealier)
mainData$Year = mainData$Year.of.AmLaw.Publication - 1
final_ipo_equity_data$year = final_ipo_equity_data$year - 1
ma_data_newdef$year = ma_data_newdef$year - 1
final_ma_data$year = final_ma_data$year - 1
#Munging
mainData = mainData %>%
mutate(EqPartner.Lawyers = Number.of.Equity.Partners / Number.of.Lawyers) %>%
select(Year,
Firm.Name,
Unique.Firm.Identifier,
Number.of.Lawyers,
EqPartner.Lawyers,
Gross.Revenue,
Net.Operating.Income,
`Am.Law.200.Rank.(FY:Previous.Year)`)
#Renaming columns
names(mainData) = c('Year', 'FirmName', 'FirmID', 'Lawyers', 'EqPartner.Lawyers', 'GrossRevenue', 'NOI', 'Rank')
mapToID = mainData[, c('Year', 'FirmName', 'FirmID')]
#Financial data----------------------------------------------------------------------------
#Munging
final_ipo_equity_data = final_ipo_equity_data %>%
select(year,
FirmName,
ipo_proceeds,
equity_proceeds)
#Renaming columns
names(final_ipo_equity_data) = c('Year', 'FirmName', 'IPOProceeds', 'EquityProceeds')
#Getting the FirmID
final_ipo_equity_data = left_join(final_ipo_equity_data, mapToID, by=c('Year', 'FirmName'))
#M&A data ---------------------------------------------------------------------------------
#Munging
ma_data_newdef = ma_data_newdef %>% select(year, Firm.Name, dealvalue_new, no_deals_new)
final_ma_data = final_ma_data %>% select(year, FirmName, ma_deals)
#Renaming columns
names(ma_data_newdef) = c("Year", "FirmName", "MAValueNewDeals", "MANumberDealsNew")
#names(final_ma_data) = c("Year", "Firm", "MADeals")
#Getting the FirmID
ma_data_newdef = left_join(ma_data_newdef, mapToID, by=c('Year', 'FirmName'))
#Merging the dataframes--------------------------------------------------------------------
df = left_join(mainData, final_ipo_equity_data, by=c("Year", "FirmName", "FirmID"))
df = left_join(df, ma_data_newdef, by=c("Year", "FirmName", "FirmID"))
#df = df %>% na.omit
#Create the new required variables---------------------------------------------------------
#Squared number of lawyers
df = df %>%
mutate(Lawyers2 = Lawyers^2)
#Aggregated MA proceeds
#df = df %>% group_by(Year) %>% mutate(AggMAProceeds = sum(MAValueNewDeals)) %>% ungroup()
#Aggregated MA proceeds with Hodrick's updated values
# *****Confirmed by Professor Hodrick on 5/16/2017*****
agg_dealogic_years = c(1988:2016)
agg_dealogic_values = c(336, 292, 225, 137, 124, 225, 347, 519, 659, 919, 1600, 1750, 1770,
757, 448, 524, 875,1300,1560, 1570, 925, 767, 875, 997, 980, 1180,
1610, 2360, 1670)
agg_dealogic = as.data.frame(cbind(agg_dealogic_years, agg_dealogic_values))
names(agg_dealogic) = c("Year", "AggMAProceedsLogic")
df = left_join(df, agg_dealogic, by="Year")
#Aggregated Equity Proceeds
df = df %>% group_by(Year) %>% mutate(AggEquityProceeds = sum(EquityProceeds)) %>% ungroup()
#Aggreagated IPO
df = df %>% group_by(Year) %>% mutate(AggIPOProceeds = sum(IPOProceeds))  %>% ungroup()
#Clear missing data
#df = df %>% na.omit()
#Clear for firms with low number of occurrences
minTimesAppearence = 5
df = df %>% group_by(FirmID) %>% mutate(OccCount = n()) %>% ungroup() %>% filter(OccCount >= minTimesAppearence) %>% select(-OccCount)
# Create Leverage variable
df = df %>% mutate(EqPartners = EqPartner.Lawyers*Lawyers) %>%
mutate(Leverage = (Lawyers - EqPartners)/EqPartners, NOI.eqPart = NOI/EqPartners) %>%
select(-EqPartner.Lawyers, -EqPartners)
# Rename the columns
names(df) = c("Year", "FirmName", "FirmID", "Lawyers", "GrossRev", "NOI", "Rank",
"IPO", "Equity", "MnA", "NumberMnA", "Lawyers2", "AggMnA", "AggEquity", "AggIPO", "Leverage", "NOI.eqPart")
#==========================================================================================
#======================================= SAVE =============================================
#==========================================================================================
save(df, file = 'Data/EliteLawDf.RData')
rm(list = ls())
setwd("~/Google Drive/Stanford Law Project/Merge Data")
library("openxlsx")
library("dplyr")
eqDF <- read.csv("EquityBonds-1984-2016.csv")
ipoDF <- read.csv("IPO-1984-2016.csv")
mnaDF <- read.csv("MnA-1984-2016.csv")
amlaw <- read.xlsx("AmLaw200-1985-2017.xlsx", 1)
colnames(amlaw)[1] <- "Year"
amlaw$Year <- amlaw$Year - 1
from <- c("Akerman")
to <- c("Akerman Senterfitt")
changes <- data.frame(as.character(from), as.character(to))
for (i in 1:nrow(changes)) {
amlaw$Firm.Name <- as.character(amlaw$Firm.Name)
eqDF$FirmName <- as.character(eqDF$FirmName)
ipoDF$FirmName <- as.character(ipoDF$FirmName)
mnaDF$FirmName <- as.character(mnaDF$FirmName)
amlaw$Firm.Name <- replace(amlaw$Firm.Name, amlaw$Firm.Name==changes[i,1], as.character(changes[i,2]))
eqDF$FirmName <- replace(eqDF$FirmName, eqDF$FirmName==changes[i,1], as.character(changes[i,2]))
ipoDF$FirmName <- replace(ipoDF$FirmName, ipoDF$FirmName==changes[i,1], as.character(changes[i,2]))
mnaDF$FirmName <- replace(mnaDF$FirmName, mnaDF$FirmName==changes[i,1], as.character(changes[i,2]))
}
ridAsterisks <- function(df) {
idx <- which(grepl('Rank', colnames(eqDF)))
df[,idx] <- as.character(df[,idx])
df[,idx] <- gsub("*", "", df[,idx], fixed=TRUE)
df[,idx] <- as.numeric(df[,idx])
return(df)
}
eqDF <- ridAsterisks(eqDF)
ipoDF <- ridAsterisks(ipoDF)
mnaDF <- ridAsterisks(mnaDF)
replacePunctuationFirmNames <- function(df, col) {
short <- as.character(df[,col])
short <- gsub(", ", " ", short, fixed=TRUE)
short <- gsub(" & ", " ", short, fixed=TRUE)
short <- gsub(" LLP", "", short, fixed=TRUE)
short <- gsub("^((\\w+\\W+){1}\\w+).*$","\\1",short)
df$Short <- as.factor(short)
return(df)
}
eqDF <- replacePunctuationFirmNames(eqDF, 1)
ipoDF <- replacePunctuationFirmNames(ipoDF, 1)
mnaDF <- replacePunctuationFirmNames(mnaDF, 1)
amlaw <- replacePunctuationFirmNames(amlaw, "Firm.Name")
#Clear environment-------------------------------------------------------------------------
rm(list = ls())
# Set working directory
setwd("~/Google Drive/Stanford Law Project/Merge Data")
library("openxlsx")
library("dplyr")
#==========================================================================================
#====================================== GET DATA ==========================================
#==========================================================================================
eqDF <- read.csv("EquityBonds-1984-2016.csv")
ipoDF <- read.csv("IPO-1984-2016.csv")
mnaDF <- read.csv("MnA-1984-2016.csv")
amlaw <- read.xlsx("AmLaw200-1985-2017.xlsx", 1)
colnames(amlaw)[1] <- "Year"
amlaw$Year <- amlaw$Year - 1
# hardcode some fixes to firmnames
from <- c("Akerman")
to <- c("Akerman Senterfitt")
changes <- data.frame(as.character(from), as.character(to))
for (i in 1:nrow(changes)) {
amlaw$Firm.Name <- as.character(amlaw$Firm.Name)
eqDF$FirmName <- as.character(eqDF$FirmName)
ipoDF$FirmName <- as.character(ipoDF$FirmName)
mnaDF$FirmName <- as.character(mnaDF$FirmName)
amlaw$Firm.Name <- replace(amlaw$Firm.Name, amlaw$Firm.Name==changes[i,1], as.character(changes[i,2]))
eqDF$FirmName <- replace(eqDF$FirmName, eqDF$FirmName==changes[i,1], as.character(changes[i,2]))
ipoDF$FirmName <- replace(ipoDF$FirmName, ipoDF$FirmName==changes[i,1], as.character(changes[i,2]))
mnaDF$FirmName <- replace(mnaDF$FirmName, mnaDF$FirmName==changes[i,1], as.character(changes[i,2]))
}
# get rid of asterisks in the rank columns
ridAsterisks <- function(df) {
idx <- which(grepl('Rank', colnames(eqDF)))
df[,idx] <- as.character(df[,idx])
df[,idx] <- gsub("*", "", df[,idx], fixed=TRUE)
df[,idx] <- as.numeric(df[,idx])
return(df)
}
eqDF <- ridAsterisks(eqDF)
ipoDF <- ridAsterisks(ipoDF)
mnaDF <- ridAsterisks(mnaDF)
replacePunctuationFirmNames <- function(df, col) {
short <- as.character(df[,col])
short <- gsub(", ", " ", short, fixed=TRUE)
short <- gsub(" & ", " ", short, fixed=TRUE)
short <- gsub(" and ", " ", short, fixed=TRUE)
short <- gsub(" LLP", "", short, fixed=TRUE)
short <- gsub("^((\\w+\\W+){1}\\w+).*$","\\1",short)
df$Short <- as.factor(short)
return(df)
}
eqDF <- replacePunctuationFirmNames(eqDF, 1)
ipoDF <- replacePunctuationFirmNames(ipoDF, 1)
mnaDF <- replacePunctuationFirmNames(mnaDF, 1)
amlaw <- replacePunctuationFirmNames(amlaw, "Firm.Name")
# deal with duplicates for a single firm for the same year
eqDF <- eqDF %>% group_by_(.dots=c("Short","Year")) %>% mutate(EquityBonds.Revenue=sum(EquityBonds.Revenue), EquityBonds.Market.Share=sum(EquityBonds.Market.Share),
EquityBonds.Number.of.Issues=sum(EquityBonds.Number.of.Issues)) %>% filter(row_number() == 1)
ipoDF <- ipoDF %>% group_by_(.dots=c("Short","Year")) %>% mutate(IPO.Revenue=sum(IPO.Revenue), IPO.Market.Share=sum(IPO.Market.Share),
IPO.Num.of.Issues=sum(IPO.Num.of.Issues)) %>% filter(row_number() == 1)
mnaDF <- mnaDF %>% group_by_(.dots=c("Short","Year")) %>% mutate(MnA.Revenue=sum(MnA.Revenue), MnA.Market.Share=sum(MnA.Market.Share),
Mna.Num.Of.Deals=sum(Mna.Num.Of.Deals)) %>% filter(row_number() == 1)
#Firm-specific data------------------------------------------------------------------------
amlaw <- amlaw %>%
mutate(EqPartner.Lawyers = Number.of.Equity.Partners / Number.of.Lawyers) %>%
select(Year,
Firm.Name, Short,
Number.of.Lawyers,
EqPartner.Lawyers,
Gross.Revenue,
Net.Operating.Income,
`Am.Law.200.Rank.(FY:Previous.Year)`)
names(amlaw) = c('Year', 'FirmName', 'Short', 'Lawyers', 'EqPartner.Lawyers', 'GrossRevenue', 'NOI', 'Rank')
#Financial data----------------------------------------------------------------------------
final_ipo_equity_data <- full_join(eqDF, ipoDF, by=c("Year" = "Year", "Short" = "Short")) %>% select(Year, FirmName.x, Short, EquityBonds.Revenue, IPO.Revenue, EquityBonds.Number.of.Issues, IPO.Num.of.Issues)
names(final_ipo_equity_data) = c('Year', 'FirmName', 'Short', 'EquityProceeds', 'IPOProceeds', 'EquityIssues', 'IPOIssues')
#M&A data ---------------------------------------------------------------------------------
mnaDF <- mnaDF %>% select(Year, FirmName, MnA.Revenue, Mna.Num.Of.Deals, Short)
names(mnaDF) <- c("Year", "FirmName", "MnARevenue", "MnANumOfDeals", "Short")
df <- left_join(amlaw, final_ipo_equity_data %>% select(-FirmName), by=c("Year" = "Year", "Short" = "Short"))
df <- left_join(df, mnaDF %>% select(-FirmName), by=c("Year" = "Year", "Short" = "Short"))
df <- df %>% mutate(Lawyers2 = Lawyers^2)
agg_dealogic_years = c(1988:2016)
agg_dealogic_values = c(336, 292, 225, 137, 124, 225, 347, 519, 659, 919, 1600, 1750, 1770,
757, 448, 524, 875,1300,1560, 1570, 925, 767, 875, 997, 980, 1180,
1610, 2360, 1670)
agg_dealogic = as.data.frame(cbind(agg_dealogic_years, agg_dealogic_values))
names(agg_dealogic) = c("Year", "AggMAProceedsLogic")
df <- left_join(df, agg_dealogic, by="Year")
df[is.na(df)] <- 0
toWrite <- df %>% select(-Short)
library(xlsx)
write.xlsx(as.data.frame(toWrite), "merged2.xlsx", row.names=FALSE)
table(toWrite$Year)
toWrite <- df %>% select(-Short, -Rank)
write.xlsx(as.data.frame(toWrite), "merged2.xlsx", row.names=FALSE)
sd(c(0,0,0,1))
sd(c(0,0,1,1))
sd(c(1,0,1,0))
rm(list = ls())
rm(list = ls())
setwd("~/Google Drive/Stanford Law Project/Merge Data")
library("openxlsx")
library("dplyr")
library("xlsx")
eqDF <- read.csv("EquityBonds-1984-2016.csv")
ipoDF <- read.csv("IPO-1984-2016.csv")
mnaDF <- read.csv("MnA-1984-2016.csv")
amlaw <- read.xlsx("AmLaw200-1985-2017.xlsx", 1)
