caption <- paste(caption, "GrossRevenue/EquityPartner", sep="")
}
if (outputDenominator == "PerLawyer" && modelOutput != "NOI.eqPart" && modelOutput != "GrossRev.eqPart") {
caption <- paste(caption, "/Lawyer", sep="")
}
if (dealsAndOrRevenue == "Both") {
caption <- paste(caption, " $\\sim$ Revenue + Counts", sep="")
} else if (dealsAndOrRevenue == "Deals") {
caption <- paste(caption, " $\\sim$ Counts", sep="")
} else if (dealsAndOrRevenue == "Revenue") {
caption <- paste(caption, " $\\sim$ Revenue", sep="")
}
if (excludeLawyer == "WithoutLawyers") {
caption <- paste(caption, " (without Lawyers)", sep="")
} else if (excludeLawyer == "WithLawyers2") {
caption <- paste(caption, " (with Lawyers$^2$)", sep="")
} else if (excludeLawyer == "WithLawyersLog") {
caption <- paste(caption, " (with log(Lawyers))", sep="")
}
print(paste(counter, modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer))
tables[[counter]] <- xtable(thisTable, caption=caption)
counter <- counter + 1
}
}
}
}
# save all of the latex tables to files
for (i in 1:length(tables)) {
istr = as.character(i)
if (i < 10) {
istr = paste("0",i,sep="")
}
fileName <- paste("IndivTexOutput/regressions-table",istr,".tex",sep="")
print(tables[[i]], file=fileName, sanitize.text.function=function(x){x})
}
# save the model averaging to the tables
#saveModelAveraging(df)
####################################################################################
######################################### UNUSED CORRELATION PLOTS##################
####################################################################################
#
# # save the correlation heatmap
# heatmap <- ggplot(data = melt(corDF), aes(x=X1, y=X2, fill=value)) + geom_tile() +
#   xlab("") + ylab("") + ggtitle("Correlations HeatMap") +
#   labs(fill='Correlation')
# ggsave(file="IndivTexOutput/corrHeatmap.jpg", heatmap, width=8, height=5, dpi=300)
#
# # the ggpairs plot
# # Function to perform multiple plots with regressions
# ggpairs_with_linreg <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point() +
#     geom_smooth(method=lm, fill="blue", color="red", ...)
#   return(p)
# }
#
#
#
# toPlot <- df[, c("Lawyers", "Leverage", "GrossRev", "NOI", "IPORevenue", "EquityRevenue",
#                  "MnARevenue", "GrossRev.Lawyer", "NOI.Lawyer", "NOI.eqPart")]
#
# labels <- names(toPlot)
# labels <- gsub("GrossRev", "Rev", labels)
# labels <- gsub(".eqPart", "/EqPart", labels)
# labels <- gsub(".Lawyer", "/Law", labels)
# labels <- gsub("Revenue", "", labels)
# labels <- gsub("MnA", "M&A", labels)
#
#
# graph <- ggpairs(toPlot, lower = list(continuous = ggpairs_with_linreg),
#       columnLabels=labels)
# ggsave(file="IndivTexOutput/corrGGpairs.jpg", graph, width=8, height=5, dpi=300)
##################################################################
# This code opens the several linear regression results produced earlier
# And combine them in a way that can be easily written to LaTeX
rm(list = ls())
library(xtable)
library(dplyr)
library(ggplot2)
library(reshape)
library(GGally)
library(MuMIn)
setwd("~/Google Drive/EliteLaw/Generate Latex/")
# Open files
load('RegressionsResults.RData')
load('../Data/EliteLawDf2016.RData')
source('GenerateLatex.R')
source('../Analysis/ModelAveraging.R')
###################### Summary Statistics ######################
summaryTables <- GenerateSummaryStatistics(df)
alignment <- paste(c("l",rep("r",ncol(summaryTables))), collapse="")
print(xtable(summaryTables, align=alignment), file="IndivTexOutput/summary.tex",
sanitize.text.function=function(x){x})
##################################################################
###################### Correlations ######################
# # get the correlations table
corDF <- GenerateCorrelations(df)
corDF <- round(cor(corDF),3) # the journal uses 3 significant figures
print(xtable(corDF[,1:6], digits=3), file="IndivTexOutput/corrTable1.tex")
print(xtable(corDF[,7:10], digits=3), file="IndivTexOutput/corrTable2.tex")
print(xtable(corDF[,11:ncol(corDF)], digits=3), file="IndivTexOutput/corrTable3.tex")
# prints the correlation table by rank
corByRank <- GenerateCorrelationsByRank(df)
correlationsByRank <- corByRank[[1]]
print(xtable(correlationsByRank, digits=3), file="IndivTexOutput/MnAGDP.tex")
# now make the 6 graphs with correlations
correlRanks <- corByRank[[2]]
SaveCorrelationsByRankPlots(df, correlRanks)
##################################################################
###################### Regression Tables ######################
# Build the appropriate dataframes by slicing from the correct columns
#Performance.Rev.Lawyer.With.Lawyers = resultsPerformance[, 1:9] # unused
# Generate the Performance Table
GeneratePerformanceTable(resultsPerformance)
# Set the possible Configurations
modelOutputs = c("GrossRev", "GrossRev.eqPart", "NOI", "NOI.eqPart")
outputDenominators = c("NoRatio", "PerLawyer")
excludeLawyers = c("WithLawyers2", "WithLawyersLog", "WithoutLawyers")
firmFixedEffects = c("FirmFE", "NoFirmFE", "Lawyers")
fixedEffects = c("FE3", "FE1", "FEYear", "NoFE")
dealsAndOrRevenues = c("Both", "Revenue", "Deals")
# we do the subtraction because NOI.eqPart should not have the PerLawyer attached to it.
numTables <- length(dealsAndOrRevenues)*length(modelOutputs)*length(outputDenominators)*length(excludeLawyers) -
2*length(excludeLawyers)*length(dealsAndOrRevenues)
dealsAndOrRevenue <- "Deals"
modelOutput <- "GrossRev"
outputDenominator <- "NoRatio"
excludeLawyer <- "WithLawyers2"
tables <- vector("list", numTables)
counter <- 1
for (modelOutput in modelOutputs) {
# first subset
thisSubset1 <- names(resultsCoeffs)[grepl(modelOutput, names(resultsCoeffs))]
if (modelOutput == "NOI") {
# deselect all of the NOI.eqPart
thisSubset1 <- thisSubset1[!grepl("NOI.eqPart", thisSubset1)]
} else if (modelOutput == "GrossRev") {
# deselect all of the GrossRev.eqPart
thisSubset1 <- thisSubset1[!grepl("GrossRev.eqPart", thisSubset1)]
}
for (outputDenominator in outputDenominators) {
if (outputDenominator == "PerLawyer" && (modelOutput == "NOI.eqPart" || modelOutput == "GrossRev.eqPart")) {
next
}
thisSubset2 <- thisSubset1[grepl(outputDenominator, thisSubset1)]
for (dealsAndOrRevenue in dealsAndOrRevenues) {
thisSubset3 <- thisSubset2[grepl(dealsAndOrRevenue, thisSubset2)]
for (excludeLawyer in excludeLawyers) {
thisSubset4 <- thisSubset3[grepl(excludeLawyer, thisSubset3)]
# STRICTLY DEBUGGING# STRICTLY DEBUGGING# STRICTLY DEBUGGING
dfCoeff = resultsCoeffs[, thisSubset4]
dfTValue = resultsTValues[, thisSubset4]
dfPValue = resultsPValues[, thisSubset4]
# STRICTLY DEBUGGING# STRICTLY DEBUGGING# STRICTLY DEBUGGING
thisTable <- GenerateLatexInference(resultsCoeffs[, thisSubset4], resultsTValues[, thisSubset4],
resultsPValues[, thisSubset4])
caption <- ""
if (modelOutput == "GrossRev") {
caption <- paste(caption, "Gross Revenue", sep="")
} else if (modelOutput == "NOI") {
caption <- paste(caption, "NOI", sep="")
} else if (modelOutput == "NOI.eqPart") {
caption <- paste(caption, "NOI/EquityPartner", sep="")
} else if (modelOutput == "GrossRev.eqPart") {
caption <- paste(caption, "GrossRevenue/EquityPartner", sep="")
}
if (outputDenominator == "PerLawyer" && modelOutput != "NOI.eqPart" && modelOutput != "GrossRev.eqPart") {
caption <- paste(caption, "/Lawyer", sep="")
}
if (dealsAndOrRevenue == "Both") {
caption <- paste(caption, " $\\sim$ Revenue + Counts", sep="")
} else if (dealsAndOrRevenue == "Deals") {
caption <- paste(caption, " $\\sim$ Counts", sep="")
} else if (dealsAndOrRevenue == "Revenue") {
caption <- paste(caption, " $\\sim$ Revenue", sep="")
}
if (excludeLawyer == "WithoutLawyers") {
caption <- paste(caption, " (without Lawyers)", sep="")
} else if (excludeLawyer == "WithLawyers2") {
caption <- paste(caption, " (with Lawyers$^2$)", sep="")
} else if (excludeLawyer == "WithLawyersLog") {
caption <- paste(caption, " (with log(Lawyers))", sep="")
}
print(paste(counter, modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer))
tables[[counter]] <- xtable(thisTable, caption=caption)
counter <- counter + 1
}
}
}
}
# save all of the latex tables to files
for (i in 1:length(tables)) {
istr = as.character(i)
if (i < 10) {
istr = paste("0",i,sep="")
}
fileName <- paste("IndivTexOutput/regressions-table",istr,".tex",sep="")
print(tables[[i]], file=fileName, sanitize.text.function=function(x){x})
}
# save the model averaging to the tables
#saveModelAveraging(df)
####################################################################################
######################################### UNUSED CORRELATION PLOTS##################
####################################################################################
#
# # save the correlation heatmap
# heatmap <- ggplot(data = melt(corDF), aes(x=X1, y=X2, fill=value)) + geom_tile() +
#   xlab("") + ylab("") + ggtitle("Correlations HeatMap") +
#   labs(fill='Correlation')
# ggsave(file="IndivTexOutput/corrHeatmap.jpg", heatmap, width=8, height=5, dpi=300)
#
# # the ggpairs plot
# # Function to perform multiple plots with regressions
# ggpairs_with_linreg <- function(data, mapping, ...){
#   p <- ggplot(data = data, mapping = mapping) +
#     geom_point() +
#     geom_smooth(method=lm, fill="blue", color="red", ...)
#   return(p)
# }
#
#
#
# toPlot <- df[, c("Lawyers", "Leverage", "GrossRev", "NOI", "IPORevenue", "EquityRevenue",
#                  "MnARevenue", "GrossRev.Lawyer", "NOI.Lawyer", "NOI.eqPart")]
#
# labels <- names(toPlot)
# labels <- gsub("GrossRev", "Rev", labels)
# labels <- gsub(".eqPart", "/EqPart", labels)
# labels <- gsub(".Lawyer", "/Law", labels)
# labels <- gsub("Revenue", "", labels)
# labels <- gsub("MnA", "M&A", labels)
#
#
# graph <- ggpairs(toPlot, lower = list(continuous = ggpairs_with_linreg),
#       columnLabels=labels)
# ggsave(file="IndivTexOutput/corrGGpairs.jpg", graph, width=8, height=5, dpi=300)
##################################################################
# Clear environment
rm(list = ls())
# Load libraries
library(dplyr)
library(plm)
library(lmtest)
library(sandwich)
library(multiwayvcov)
# Load dataframe
setwd("~/Google Drive/EliteLaw/")
load('Data/EliteLawDf2016.RData')
#load('Data/EliteLawDf.RData')
source('Generate Latex/CV.R')
# -------------------------------------------------------------------------------------------------
# Current Analysis
# -------------------------------------------------------------------------------------------------
# Set the possible Configurations
modelOutputs = c("GrossRev", "GrossRev.eqPart", "NOI", "NOI.eqPart")
outputDenominators = c("NoRatio", "PerLawyer")
firmFixedEffects = c("FirmFE", "NoFirmFE", "Lawyers")
excludeLawyers = c("WithLawyers2", "WithLawyersLog", "WithoutLawyers")
fixedEffects = c("FE3", "FE1", "FEYear", "NoFE")
dealsAndOrRevenues = c("Both", "Revenue", "Deals")
modelOutput = "NOI.eqPart"
outputDenominator = "NoRatio"
firmFixedEffect = "NoFirm"
# Get the main variables
commonCovariates = df %>% select(Lawyers, Lawyers2, Leverage, FirmName, MnARevenue, EquityRevenue, IPORevenue, MnANumOfDeals, EquityIssues, IPOIssues)
# hack to change Lawyers^2 to log(lawyers)
commonCovariates = commonCovariates %>% mutate(LawyersLog = log(Lawyers), MnAIssues=MnANumOfDeals) %>% select(-MnANumOfDeals)
commonCovariates <- commonCovariates[, c(1:2, 10, 3:9, 11)]
# Create the categorical variables
# Year
years = data.frame(Years = as.factor(df$Year - min(df$Year) + 1))
# Firm
firms = data.frame(FirmID = as.character(df$FirmID))
# Prepare the table for the results
#covariates = c("Lawyers", "log(Lawyers)", "AggMnA", "AggEquity", "AggIPO", "MnARevenue", "EquityRevenue", "IPORevenue", "Leverage", "(Intercept)")
covariates = c("(Intercept)", "Lawyers", "Lawyers2", "LawyersLog", "Leverage",
"MnARevenue", "EquityRevenue", "IPORevenue",
"MnAIssues", "EquityIssues", "IPOIssues")
modelAcessment = c('Adj_R_2', 'AIC / 10e+2', 'BIC / 10e+2', 'CV / 10e+7', 'Num Params')
resultsCoeffs = data.frame(row.names = c(covariates, 'Observations', 'R2', 'Adj R2', 'AIC', 'BIC'))
resultsTValues = data.frame(row.names = covariates)
resultsPValues = data.frame(row.names = covariates)
resultsPerformance = data.frame(row.names = modelAcessment)
# Set configurations for Cross Validation
set.seed(1)
nCV = 10
#  -------------------------------------------------------------------------------------------------
# Main loop for all models
#  -------------------------------------------------------------------------------------------------
# For debugging only--------------------
dealsAndOrRevenue = dealsAndOrRevenues[1]
modelOutput = modelOutputs[3]
outputDenominator = outputDenominators[2]
firmFixedEffect = firmFixedEffects[1]
fixedEffect = fixedEffects[3]
excludeLawyer = excludeLawyers[1]
counter <- 1
resultConfig = paste(modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_')
print(paste(counter,modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_'))
currDf = commonCovariates
if(modelOutput == "GrossRev"){
currDf$Output = df$GrossRev
} else if(modelOutput == "NOI") {
currDf$Output = df$NOI
} else if(modelOutput == "NOI.eqPart"){
currDf$Output = df$NOI.eqPart
} else if(modelOutput == "GrossRev.eqPart"){
currDf$Output = df$GrossRev.eqPart
}
if(outputDenominator == "PerLawyer"){
currDf$Output = currDf$Output / currDf$Lawyers
}
if(fixedEffect == "FE3"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA, AggEquity = df$AggEquity, AggIPO = df$AggIPO)
} else if(fixedEffect == "FE1"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA)
} else if(fixedEffect == "FEYear"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, years)
}
if(excludeLawyer == "WithoutLawyers"){
currDf = currDf %>% select(-Lawyers, -Lawyers2, -LawyersLog)
} else if (excludeLawyer == "WithLawyers2"){
currDf = currDf %>% select(-LawyersLog)
} else if (excludeLawyer == "WithLawyersLog"){
currDf = currDf %>% select(-Lawyers2)
}
if (dealsAndOrRevenue == "Deals") {
currDf = currDf %>% select(-MnARevenue, -IPORevenue, -EquityRevenue)
} else if (dealsAndOrRevenue == "Revenue") {
currDf = currDf %>% select(-MnAIssues, -IPOIssues, -EquityIssues)
}
if(firmFixedEffect == "FirmFE"){
currDf$FirmID = firms$FirmName
} else if(firmFixedEffect == "Lawyers"){
if(excludeLawyer == "WithoutLawyers"){
next
} else if (excludeLawyer == "WithLawyers2") {
currDf = currDf %>% select(Output, Lawyers, Lawyers2)
} else if (excludeLawyer == "WithLawyersLog") {
currDf = currDf %>% select(Output, Lawyers, LawyersLog)
}
}
currDf = currDf %>% na.omit()
currModel = lm(Output ~., data = currDf[ , !(names(currDf) %in% c("FirmName"))])
coeffs = summary(currModel)$coefficients[, 1]
r2 = round(summary(currModel)$r.squared, 2)
adjR2 = round(summary(currModel)$adj.r.squared, 2)
aic = round(AIC(currModel)/100)
bic = round(BIC(currModel)/100)
if(outputDenominator == "NoRatio" && modelOutput != "NOI.eqPart"){ denom = 10^13} else{ denom = denom = 10^7}
cv = round(CrossValidationError(currDf, 20)/denom)
if(firmFixedEffect == "FirmFE"){
vcovMatrix = cluster.vcov(currModel, currDf[, "FirmName"])
} else if(firmFixedEffect == "FEYear"){
vcovMatrix = cluster.vcov(currModel, currDf[, "Years"])
} else {
vcovMatrix = vcovHC(currModel, type = "HC0")
}
adjustedModel = coeftest(currModel, vcovMatrix)
adjustedModel
coeftest
?coeftest
ols_vif_tol(model)
library(olsrr)
install.packages("olsrr")
install.packages("olsrr")
install.packages("olsrr")
install.packages("olsrr")
ls
vif(currModel)
library(car)
vif(currModel)
Output
currModel
modelOutput
outputDenominator
dealsAndOrRevenue = dealsAndOrRevenues[1]
modelOutput = modelOutputs[3]
outputDenominator = outputDenominators[1]
firmFixedEffect = firmFixedEffects[1]
fixedEffect = fixedEffects[3]
excludeLawyer = excludeLawyers[1]
counter <- 1
# Set current configuration
resultConfig = paste(modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_')
print(paste(counter,modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_'))
# Setting the main covariates
currDf = commonCovariates
# Setting the output numerator
if(modelOutput == "GrossRev"){
currDf$Output = df$GrossRev
} else if(modelOutput == "NOI") {
currDf$Output = df$NOI
} else if(modelOutput == "NOI.eqPart"){
currDf$Output = df$NOI.eqPart
} else if(modelOutput == "GrossRev.eqPart"){
currDf$Output = df$GrossRev.eqPart
}
# Setting the output denominator
if(outputDenominator == "PerLawyer"){
currDf$Output = currDf$Output / currDf$Lawyers
}
# Set the variables regarding the fixed effects
if(fixedEffect == "FE3"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA, AggEquity = df$AggEquity, AggIPO = df$AggIPO)
} else if(fixedEffect == "FE1"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA)
} else if(fixedEffect == "FEYear"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, years)
}
# Exclude Lawyers if necessary
if(excludeLawyer == "WithoutLawyers"){
currDf = currDf %>% select(-Lawyers, -Lawyers2, -LawyersLog)
} else if (excludeLawyer == "WithLawyers2"){
currDf = currDf %>% select(-LawyersLog)
} else if (excludeLawyer == "WithLawyersLog"){
currDf = currDf %>% select(-Lawyers2)
}
# Remove deals if selected "Revenue" or vice versa
if (dealsAndOrRevenue == "Deals") {
currDf = currDf %>% select(-MnARevenue, -IPORevenue, -EquityRevenue)
} else if (dealsAndOrRevenue == "Revenue") {
currDf = currDf %>% select(-MnAIssues, -IPOIssues, -EquityIssues)
}
# Setting the variables regarding the fixed firm effects
if(firmFixedEffect == "FirmFE"){
currDf$FirmID = firms$FirmName
} else if(firmFixedEffect == "Lawyers"){
if(excludeLawyer == "WithoutLawyers"){
next
} else if (excludeLawyer == "WithLawyers2") {
currDf = currDf %>% select(Output, Lawyers, Lawyers2)
} else if (excludeLawyer == "WithLawyersLog") {
currDf = currDf %>% select(Output, Lawyers, LawyersLog)
}
}
# Cleaning for missing data
currDf = currDf %>% na.omit()
# Run the linear regression
currModel = lm(Output ~., data = currDf[ , !(names(currDf) %in% c("FirmName"))])
vif(currModel)
currModel
summary(currModel)
vif(currModel)
if (outputDenominator == "PerLawyer" && (modelOutput == "NOI.eqPart" || modelOutput == "GrossRev.eqPart")) {
next
}
resultConfig = paste(modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_')
print(paste(counter,modelOutput, outputDenominator, dealsAndOrRevenue, excludeLawyer, firmFixedEffect, fixedEffect, sep = '_'))
currDf = commonCovariates
if(modelOutput == "GrossRev"){
currDf$Output = df$GrossRev
} else if(modelOutput == "NOI") {
currDf$Output = df$NOI
} else if(modelOutput == "NOI.eqPart"){
currDf$Output = df$NOI.eqPart
} else if(modelOutput == "GrossRev.eqPart"){
currDf$Output = df$GrossRev.eqPart
}
if(outputDenominator == "PerLawyer"){
currDf$Output = currDf$Output / currDf$Lawyers
}
if(fixedEffect == "FE3"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA, AggEquity = df$AggEquity, AggIPO = df$AggIPO)
} else if(fixedEffect == "FE1"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, AggMnA = df$AggMnA)
} else if(fixedEffect == "FEYear"){
# Skip if we are regressing only lawyers
if(firmFixedEffect ==  "Lawyers"){ next }
currDf = cbind(currDf, years)
}
if(excludeLawyer == "WithoutLawyers"){
currDf = currDf %>% select(-Lawyers, -Lawyers2, -LawyersLog)
} else if (excludeLawyer == "WithLawyers2"){
currDf = currDf %>% select(-LawyersLog, -Lawyers)
} else if (excludeLawyer == "WithLawyersLog"){
currDf = currDf %>% select(-Lawyers2, -Lawyers)
}
# Clear environment
rm(list = ls())
# Load libraries
library(dplyr)
library(plm)
library(lmtest)
library(sandwich)
library(multiwayvcov)
library(car)
# Load dataframe
setwd("~/Google Drive/EliteLaw/")
load('Data/EliteLawDf2016.RData')
#load('Data/EliteLawDf.RData')
source('Generate Latex/CV.R')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
